$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 a clk $end
  $var wire 1 b rst $end
  $var wire 1 c illegal_op $end
  $var wire 32 d debug_pc [31:0] $end
  $var wire 32 e debug_instr [31:0] $end
  $var wire 32 f debug_reg_wdata [31:0] $end
  $var wire 32 g debug_reg_rdata1 [31:0] $end
  $var wire 32 h debug_reg_rdata2 [31:0] $end
  $var wire 32 i debug_alu_result [31:0] $end
  $var wire 32 j debug_mem_rdata [31:0] $end
  $var wire 32 k debug_next_pc [31:0] $end
  $var wire 1 l debug_pc_src_sel $end
  $var wire 4 m debug_alu_ctrl [3:0] $end
  $var wire 1 n debug_reg_wen $end
  $scope module RV32I_Core $end
   $var wire 32 o IMEM_WORDS [31:0] $end
   $var wire 32 o DMEM_WORDS [31:0] $end
   $var wire 192 p IMEM_INIT [191:0] $end
   $var wire 8 v DMEM_INIT [7:0] $end
   $var wire 1 a clk $end
   $var wire 1 b rst $end
   $var wire 1 c illegal_op $end
   $var wire 32 d debug_pc [31:0] $end
   $var wire 32 e debug_instr [31:0] $end
   $var wire 32 f debug_reg_wdata [31:0] $end
   $var wire 32 g debug_reg_rdata1 [31:0] $end
   $var wire 32 h debug_reg_rdata2 [31:0] $end
   $var wire 32 i debug_alu_result [31:0] $end
   $var wire 32 j debug_mem_rdata [31:0] $end
   $var wire 32 k debug_next_pc [31:0] $end
   $var wire 1 l debug_pc_src_sel $end
   $var wire 4 m debug_alu_ctrl [3:0] $end
   $var wire 1 n debug_reg_wen $end
   $var wire 32 k next_pc [31:0] $end
   $var wire 32 - pc [31:0] $end
   $var wire 32 . pc_plus_4 [31:0] $end
   $var wire 32 e instr [31:0] $end
   $var wire 32 / immediate [31:0] $end
   $var wire 32 $ reg_wdata [31:0] $end
   $var wire 32 g reg_rdata1 [31:0] $end
   $var wire 32 h reg_rdata2 [31:0] $end
   $var wire 1 0 reg_wen $end
   $var wire 1 1 alu_pc_sel $end
   $var wire 1 2 alu_imm_sel $end
   $var wire 4 3 alu_ctrl [3:0] $end
   $var wire 1 4 mem_wen $end
   $var wire 2 5 wb_sel [1:0] $end
   $var wire 1 % pc_src_sel $end
   $var wire 3 6 branch_cond [2:0] $end
   $var wire 32 & alu_src1 [31:0] $end
   $var wire 32 ' alu_src2 [31:0] $end
   $var wire 32 ( alu_result [31:0] $end
   $var wire 3 7 byte_mask [2:0] $end
   $var wire 32 ) mem_rdata [31:0] $end
   $scope module pcSel $end
    $var wire 32 . A [31:0] $end
    $var wire 32 ( B [31:0] $end
    $var wire 1 % sel $end
    $var wire 32 k OUT [31:0] $end
   $upscope $end
   $scope module u_alu $end
    $var wire 32 & src1 [31:0] $end
    $var wire 32 ' src2 [31:0] $end
    $var wire 4 3 alu_ctrl [3:0] $end
    $var wire 32 ( result [31:0] $end
   $upscope $end
   $scope module u_aluImmSel $end
    $var wire 32 h A [31:0] $end
    $var wire 32 / B [31:0] $end
    $var wire 1 2 sel $end
    $var wire 32 ' OUT [31:0] $end
   $upscope $end
   $scope module u_aluPCSel $end
    $var wire 32 g A [31:0] $end
    $var wire 32 - B [31:0] $end
    $var wire 1 1 sel $end
    $var wire 32 & OUT [31:0] $end
   $upscope $end
   $scope module u_branchHandler $end
    $var wire 3 6 branch_cond [2:0] $end
    $var wire 32 g src1 [31:0] $end
    $var wire 32 h src2 [31:0] $end
    $var wire 1 % branched $end
    $var wire 1 * equal $end
    $var wire 1 + slt $end
    $var wire 1 , sltu $end
   $upscope $end
   $scope module u_controller $end
    $var wire 7 8 opcode [6:0] $end
    $var wire 7 9 func7 [6:0] $end
    $var wire 3 : func3 [2:0] $end
    $var wire 4 3 alu_ctrl [3:0] $end
    $var wire 3 6 branch_cond [2:0] $end
    $var wire 3 7 byte_mask [2:0] $end
    $var wire 2 5 wb_sel [1:0] $end
    $var wire 1 0 reg_wen $end
    $var wire 1 1 alu_pc_sel $end
    $var wire 1 2 alu_imm_sel $end
    $var wire 1 4 mem_wen $end
    $var wire 1 c illegal_op $end
   $upscope $end
   $scope module u_dataMem $end
    $var wire 32 o WORDS [31:0] $end
    $var wire 8 v mem_init [7:0] $end
    $var wire 1 a clk $end
    $var wire 1 4 wen $end
    $var wire 32 ( address [31:0] $end
    $var wire 32 h wdata [31:0] $end
    $var wire 3 7 byte_mask [2:0] $end
    $var wire 32 ) rdata [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u_immGen $end
    $var wire 32 e instr [31:0] $end
    $var wire 32 / immediate [31:0] $end
    $var wire 5 ; opcode [4:0] $end
    $var wire 3 < func3 [2:0] $end
    $var wire 5 w I_type [4:0] $end
    $var wire 5 x B_type [4:0] $end
    $var wire 5 y JAL_instr [4:0] $end
    $var wire 5 z JALR_instr [4:0] $end
    $var wire 5 { L_type [4:0] $end
    $var wire 5 | S_type [4:0] $end
    $var wire 5 } LUI_instr [4:0] $end
    $var wire 5 ~ AUIPC_instr [4:0] $end
   $upscope $end
   $scope module u_instrMem $end
    $var wire 32 o WORDS [31:0] $end
    $var wire 192 p mem_init [191:0] $end
    $var wire 32 - address [31:0] $end
    $var wire 32 e instr [31:0] $end
   $upscope $end
   $scope module u_pc $end
    $var wire 1 a clk $end
    $var wire 1 b rst $end
    $var wire 32 k next_pc [31:0] $end
    $var wire 32 - pc [31:0] $end
    $var wire 32 !! reset_val [31:0] $end
   $upscope $end
   $scope module u_pcIncr $end
    $var wire 32 - src1 [31:0] $end
    $var wire 32 "! src2 [31:0] $end
    $var wire 32 . result [31:0] $end
   $upscope $end
   $scope module u_regFile $end
    $var wire 1 a clk $end
    $var wire 1 b rst $end
    $var wire 1 0 wen $end
    $var wire 5 = rsrc1 [4:0] $end
    $var wire 5 > rsrc2 [4:0] $end
    $var wire 5 ? wdest [4:0] $end
    $var wire 32 $ wdata [31:0] $end
    $var wire 32 g rdata1 [31:0] $end
    $var wire 32 h rdata2 [31:0] $end
    $var wire 32 @ regs[0] [31:0] $end
    $var wire 32 A regs[1] [31:0] $end
    $var wire 32 B regs[2] [31:0] $end
    $var wire 32 C regs[3] [31:0] $end
    $var wire 32 D regs[4] [31:0] $end
    $var wire 32 E regs[5] [31:0] $end
    $var wire 32 F regs[6] [31:0] $end
    $var wire 32 G regs[7] [31:0] $end
    $var wire 32 H regs[8] [31:0] $end
    $var wire 32 I regs[9] [31:0] $end
    $var wire 32 J regs[10] [31:0] $end
    $var wire 32 K regs[11] [31:0] $end
    $var wire 32 L regs[12] [31:0] $end
    $var wire 32 M regs[13] [31:0] $end
    $var wire 32 N regs[14] [31:0] $end
    $var wire 32 O regs[15] [31:0] $end
    $var wire 32 P regs[16] [31:0] $end
    $var wire 32 Q regs[17] [31:0] $end
    $var wire 32 R regs[18] [31:0] $end
    $var wire 32 S regs[19] [31:0] $end
    $var wire 32 T regs[20] [31:0] $end
    $var wire 32 U regs[21] [31:0] $end
    $var wire 32 V regs[22] [31:0] $end
    $var wire 32 W regs[23] [31:0] $end
    $var wire 32 X regs[24] [31:0] $end
    $var wire 32 Y regs[25] [31:0] $end
    $var wire 32 Z regs[26] [31:0] $end
    $var wire 32 [ regs[27] [31:0] $end
    $var wire 32 \ regs[28] [31:0] $end
    $var wire 32 ] regs[29] [31:0] $end
    $var wire 32 ^ regs[30] [31:0] $end
    $var wire 32 _ regs[31] [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 ` i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u_wbSel $end
    $var wire 32 ( A [31:0] $end
    $var wire 32 ) B [31:0] $end
    $var wire 32 . C [31:0] $end
    $var wire 2 5 sel [1:0] $end
    $var wire 32 $ OUT [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000001000000000 #
b00000000000000000000000000000101 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000101 '
b00000000000000000000000000000101 (
b00000000000000000000000000000000 )
1*
0+
0,
b00000000000000000000000000000000 -
b00000000000000000000000000000100 .
b00000000000000000000000000000101 /
10
01
12
b0000 3
04
b00 5
b000 6
b010 7
b0010011 8
b0000000 9
b000 :
b00100 ;
b000 <
b00000 =
b00101 >
b00001 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
0a
0b
0c
b00000000000000000000000000000000 d
b00000000010100000000000010010011 e
b00000000000000000000000000000101 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000101 i
b00000000000000000000000000000000 j
b00000000000000000000000000000100 k
0l
b0000 m
1n
b00000000000000000000000010000000 o
b001011100010111101110011011100100110001100101111010100100101011000110011001100100100100101011111010101000110010101110011011101000101000001110010011011110110011100101110011011010110010101101101 p
b00000000 v
b00100 w
b11000 x
b11011 y
b11001 z
b00000 {
b01000 |
b01101 }
b00101 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000100 "!
#1
b00000000000000000000000000100000 `
1a
#2
0a
1b
#3
b00000000000000000000000000000011 $
b00000000000000000000000000000011 '
b00000000000000000000000000000011 (
b00000000000000000000000000000100 -
b00000000000000000000000000001000 .
b00000000000000000000000000000011 /
b00011 >
b00010 ?
b00000000000000000000000000000101 A
1a
b00000000000000000000000000000100 d
b00000000001100000000000100010011 e
b00000000000000000000000000000011 f
b00000000000000000000000000000011 i
b00000000000000000000000000001000 k
#4
0a
#5
b00000000000000000000000100000000 $
b00000000000000000000000100000000 '
b00000000000000000000000100000000 (
b00000000000000000000000000001000 -
b00000000000000000000000000001100 .
b00000000000000000000000100000000 /
b0001000 9
b00000 >
b00011 ?
b00000000000000000000000000000011 B
1a
b00000000000000000000000000001000 d
b00010000000000000000000110010011 e
b00000000000000000000000100000000 f
b00000000000000000000000100000000 i
b00000000000000000000000000001100 k
#6
0a
#7
b00000000000000000000000000001000 $
b00000000000000000000000000000101 &
b00000000000000000000000000000011 '
b00000000000000000000000000001000 (
0*
b00000000000000000000000000001100 -
b00000000000000000000000000010000 .
b00000000000000000000000000000000 /
02
b0110011 8
b0000000 9
b01100 ;
b00001 =
b00010 >
b00100 ?
b00000000000000000000000100000000 C
1a
b00000000000000000000000000001100 d
b00000000001000001000001000110011 e
b00000000000000000000000000001000 f
b00000000000000000000000000000101 g
b00000000000000000000000000000011 h
b00000000000000000000000000001000 i
b00000000000000000000000000010000 k
#8
0a
#9
b00000000000000000000000000000010 $
b00000000000000000000000000000010 (
b00000000000000000000000000010000 -
b00000000000000000000000000010100 .
b0001 3
b0100000 9
b00101 ?
b00000000000000000000000000001000 D
1a
b00000000000000000000000000010000 d
b01000000001000001000001010110011 e
b00000000000000000000000000000010 f
b00000000000000000000000000000010 i
b00000000000000000000000000010100 k
b0001 m
#10
0a
#11
b00000000000000000000000000000001 $
b00000000000000000000000000000001 (
b00000000000000000000000000010100 -
b00000000000000000000000000011000 .
b0100 3
b0000000 9
b111 :
b111 <
b00110 ?
b00000000000000000000000000000010 E
1a
b00000000000000000000000000010100 d
b00000000001000001111001100110011 e
b00000000000000000000000000000001 f
b00000000000000000000000000000001 i
b00000000000000000000000000011000 k
b0100 m
#12
0a
#13
b00000000000000000000000000000111 $
b00000000000000000000000000000111 (
b00000000000000000000000000011000 -
b00000000000000000000000000011100 .
b0011 3
b110 :
b110 <
b00111 ?
b00000000000000000000000000000001 F
1a
b00000000000000000000000000011000 d
b00000000001000001110001110110011 e
b00000000000000000000000000000111 f
b00000000000000000000000000000111 i
b00000000000000000000000000011100 k
b0011 m
#14
0a
#15
b00000000000000000000000000000110 $
b00000000000000000000000000000110 (
b00000000000000000000000000011100 -
b00000000000000000000000000100000 .
b0010 3
b100 :
b100 <
b01000 ?
b00000000000000000000000000000111 G
1a
b00000000000000000000000000011100 d
b00000000001000001100010000110011 e
b00000000000000000000000000000110 f
b00000000000000000000000000000110 i
b00000000000000000000000000100000 k
b0010 m
#16
0a
#17
b00000000000000000000000000101000 $
b00000000000000000000000000101000 (
b00000000000000000000000000100000 -
b00000000000000000000000000100100 .
b0101 3
b001 :
b001 <
b01001 ?
b00000000000000000000000000000110 H
1a
b00000000000000000000000000100000 d
b00000000001000001001010010110011 e
b00000000000000000000000000101000 f
b00000000000000000000000000101000 i
b00000000000000000000000000100100 k
b0101 m
#18
0a
#19
b00000000000000000000000000100000 $
b00000000000000000000000100000000 &
b00000000000000000000000000100000 (
b00000000000000000000000000100100 -
b00000000000000000000000000101000 .
b0110 3
b101 :
b101 <
b00011 =
b01010 ?
b00000000000000000000000000101000 I
1a
b00000000000000000000000000100100 d
b00000000001000011101010100110011 e
b00000000000000000000000000100000 f
b00000000000000000000000100000000 g
b00000000000000000000000000100000 i
b00000000000000000000000000101000 k
b0110 m
#20
0a
#21
b00000000000000000000000000000000 $
b00000000000000000000000000000101 &
b00000000000000000000000000000000 (
b00000000000000000000000000101000 -
b00000000000000000000000000101100 .
b0111 3
b0100000 9
b00001 =
b01011 ?
b00000000000000000000000000100000 J
1a
b00000000000000000000000000101000 d
b01000000001000001101010110110011 e
b00000000000000000000000000000000 f
b00000000000000000000000000000101 g
b00000000000000000000000000000000 i
b00000000000000000000000000101100 k
b0111 m
#22
0a
#23
b00000000000000000000000000101100 -
b00000000000000000000000000110000 .
b1000 3
b0000000 9
b010 :
b010 <
b01100 ?
1a
b00000000000000000000000000101100 d
b00000000001000001010011000110011 e
b00000000000000000000000000110000 k
b1000 m
#24
0a
#25
b00000000000000000000000000110000 -
b00000000000000000000000000110100 .
b1001 3
b011 :
b011 <
b01101 ?
1a
b00000000000000000000000000110000 d
b00000000001000001011011010110011 e
b00000000000000000000000000110100 k
b1001 m
#26
0a
#27
b11111111111111111111111111111100 $
b00000000000000000000000000000000 &
b11111111111111111111111111111100 '
b11111111111111111111111111111100 (
b11011110101011011011111011101111 )
1*
b00000000000000000000000000110100 -
b00000000000000000000000000111000 .
b11111111111111111111111111111100 /
12
b0000 3
b0010011 8
b1111111 9
b000 :
b00100 ;
b000 <
b00000 =
b11100 >
b01110 ?
1a
b00000000000000000000000000110100 d
b11111111110000000000011100010011 e
b11111111111111111111111111111100 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b11111111111111111111111111111100 i
b11011110101011011011111011101111 j
b00000000000000000000000000111000 k
b0000 m
#28
0a
#29
b00000000000000000000000000000001 $
b00000000000000000000000000000101 &
b00000000000000000000000000000110 '
b00000000000000000000000000000001 (
b00000000000000000000000000000000 )
0*
b00000000000000000000000000111000 -
b00000000000000000000000000111100 .
b00000000000000000000000000000110 /
b1000 3
b0000000 9
b010 :
b010 <
b00001 =
b00110 >
b01111 ?
b11111111111111111111111111111100 N
1a
b00000000000000000000000000111000 d
b00000000011000001010011110010011 e
b00000000000000000000000000000001 f
b00000000000000000000000000000101 g
b00000000000000000000000000000001 h
b00000000000000000000000000000001 i
b00000000000000000000000000000000 j
b00000000000000000000000000111100 k
b1000 m
#30
0a
#31
b00000000000000000000000000111100 -
b00000000000000000000000001000000 .
b1001 3
b011 :
b011 <
b10000 ?
b00000000000000000000000000000001 O
1a
b00000000000000000000000000111100 d
b00000000011000001011100000010011 e
b00000000000000000000000001000000 k
b1001 m
#32
0a
#33
b00000000000000000000000100000000 $
b00000000000000000000000100000000 &
b00000000000000000000000000000000 '
b00000000000000000000000100000000 (
b00000000000000000000000001000000 -
b00000000000000000000000001000100 .
b00000000000000000000000000000000 /
00
b0000 3
14
b0100011 8
b010 :
b01000 ;
b010 <
b00011 =
b00001 >
b00000 ?
b00000000000000000000000000000001 P
1a
b00000000000000000000000001000000 d
b00000000000100011010000000100011 e
b00000000000000000000000100000000 f
b00000000000000000000000100000000 g
b00000000000000000000000000000101 h
b00000000000000000000000100000000 i
b00000000000000000000000001000100 k
b0000 m
0n
#34
0a
#35
b00000000000000000000000000000101 $
b00000000000000000000000000000101 )
b00000000000000000000000001000100 -
b00000000000000000000000001001000 .
10
04
b01 5
b0000011 8
b00000 ;
b00000 >
b10001 ?
1a
b00000000000000000000000001000100 d
b00000000000000011010100010000011 e
b00000000000000000000000000000101 f
b00000000000000000000000000000000 h
b00000000000000000000000000000101 j
b00000000000000000000000001001000 k
1n
#36
0a
#37
b00000000000000000000000100000100 $
b00000000000000000000000000000100 '
b00000000000000000000000100000100 (
b00000000000000000000000000000000 )
b00000000000000000000000001001000 -
b00000000000000000000000001001100 .
b00000000000000000000000000000100 /
00
14
b00 5
b001 7
b0100011 8
b001 :
b01000 ;
b001 <
b00001 >
b00100 ?
b00000000000000000000000000000101 Q
1a
b00000000000000000000000001001000 d
b00000000000100011001001000100011 e
b00000000000000000000000100000100 f
b00000000000000000000000000000101 h
b00000000000000000000000100000100 i
b00000000000000000000000000000000 j
b00000000000000000000000001001100 k
0n
#38
0a
#39
b00000000000000000000000000000101 $
b00000000000000000000000000000101 )
b00000000000000000000000001001100 -
b00000000000000000000000001010000 .
10
04
b01 5
b0000011 8
b00000 ;
b00100 >
b10010 ?
1a
b00000000000000000000000001001100 d
b00000000010000011001100100000011 e
b00000000000000000000000000000101 f
b00000000000000000000000000001000 h
b00000000000000000000000000000101 j
b00000000000000000000000001010000 k
1n
#40
0a
#41
b00000000000000000000000100001000 $
b00000000000000000000000000001000 '
b00000000000000000000000100001000 (
b00000000000000000000000000000000 )
b00000000000000000000000001010000 -
b00000000000000000000000001010100 .
b00000000000000000000000000001000 /
00
14
b00 5
b000 7
b0100011 8
b000 :
b01000 ;
b000 <
b00001 >
b01000 ?
b00000000000000000000000000000101 R
1a
b00000000000000000000000001010000 d
b00000000000100011000010000100011 e
b00000000000000000000000100001000 f
b00000000000000000000000000000101 h
b00000000000000000000000100001000 i
b00000000000000000000000000000000 j
b00000000000000000000000001010100 k
0n
#42
0a
#43
b00000000000000000000000000000101 $
b00000000000000000000000000000101 )
b00000000000000000000000001010100 -
b00000000000000000000000001011000 .
10
04
b01 5
b0000011 8
b00000 ;
b01000 >
b10011 ?
1a
b00000000000000000000000001010100 d
b00000000100000011000100110000011 e
b00000000000000000000000000000101 f
b00000000000000000000000000000110 h
b00000000000000000000000000000101 j
b00000000000000000000000001011000 k
1n
#44
0a
#45
b00000000000000000000000001100000 $
1%
b00000000000000000000000001011000 &
b00000000000000000000000001100000 (
b00000000000000000000000000000000 )
1*
b00000000000000000000000001011000 -
b00000000000000000000000001011100 .
00
11
b00 5
b001 6
b010 7
b1100011 8
b11000 ;
b00001 =
b10001 >
b01000 ?
b00000000000000000000000000000101 S
1a
b00000000000000000000000001011000 d
b00000001000100001000010001100011 e
b00000000000000000000000001100000 f
b00000000000000000000000000000101 g
b00000000000000000000000000000101 h
b00000000000000000000000001100000 i
b00000000000000000000000000000000 j
b00000000000000000000000001100000 k
1l
0n
#46
0a
#47
b00000000000000000000000000001010 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000000001010 '
b00000000000000000000000000001010 (
0*
1+
1,
b00000000000000000000000001100000 -
b00000000000000000000000001100100 .
b00000000000000000000000000001010 /
10
01
b000 6
b0010011 8
b00100 ;
b00000 =
b01010 >
b10101 ?
1a
b00000000000000000000000001100000 d
b00000000101000000000101010010011 e
b00000000000000000000000000001010 f
b00000000000000000000000000000000 g
b00000000000000000000000000100000 h
b00000000000000000000000000001010 i
b00000000000000000000000001100100 k
0l
1n
#48
0a
#49
b00000000000000000000000001101000 $
1%
b00000000000000000000000001100100 &
b00000000000000000000000000001000 '
b00000000000000000000000001101100 (
b00000000000000000000000001100100 -
b00000000000000000000000001101000 .
b00000000000000000000000000001000 /
11
b10 5
b111 6
b1101111 8
b11011 ;
b01000 >
b00000000000000000000000000001010 U
1a
b00000000000000000000000001100100 d
b00000000100000000000101011101111 e
b00000000000000000000000001101000 f
b00000000000000000000000000000110 h
b00000000000000000000000001101100 i
b00000000000000000000000001101100 k
1l
#50
0a
#51
b00000000000000000000000001001101 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000001001101 '
b00000000000000000000000001001101 (
1*
0+
0,
b00000000000000000000000001101100 -
b00000000000000000000000001110000 .
b00000000000000000000000001001101 /
01
b00 5
b000 6
b0010011 8
b0000010 9
b00100 ;
b01101 >
b10111 ?
b00000000000000000000000001101000 U
1a
b00000000000000000000000001101100 d
b00000100110100000000101110010011 e
b00000000000000000000000001001101 f
b00000000000000000000000000000000 h
b00000000000000000000000001001101 i
b00000000000000000000000001110000 k
0l
#52
0a
#53
b00000000000000000000000000000001 $
b00000000000000000000000000000001 &
b00000000000000000000000000000101 '
b00000000000000000000000000000001 (
0*
1+
1,
b00000000000000000000000001110000 -
b00000000000000000000000001110100 .
b00000000000000000000000000000000 /
02
b1001 3
b0110011 8
b0011001 9
b011 :
b01100 ;
b011 <
b00110 =
b10011 >
b00110 ?
b00000000000000000000000001001101 W
1a
b00000000000000000000000001110000 d
b00110011001100110011001100110011 e
b00000000000000000000000000000001 f
b00000000000000000000000000000001 g
b00000000000000000000000000000101 h
b00000000000000000000000000000001 i
b00000000000000000000000001110100 k
b1001 m
