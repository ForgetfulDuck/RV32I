$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 b clk $end
  $var wire 1 c rst $end
  $var wire 1 d illegal_op $end
  $var wire 32 e debug_pc [31:0] $end
  $var wire 32 f debug_instr [31:0] $end
  $var wire 32 g debug_reg_wdata [31:0] $end
  $var wire 32 h debug_reg_rdata1 [31:0] $end
  $var wire 32 i debug_reg_rdata2 [31:0] $end
  $var wire 32 j debug_alu_result [31:0] $end
  $var wire 32 k debug_mem_rdata [31:0] $end
  $var wire 32 l debug_next_pc [31:0] $end
  $var wire 1 m debug_pc_src_sel $end
  $var wire 4 n debug_alu_ctrl [3:0] $end
  $var wire 1 o debug_reg_wen $end
  $scope module RV32I_Core $end
   $var wire 32 p IMEM_WORDS [31:0] $end
   $var wire 32 p DMEM_WORDS [31:0] $end
   $var wire 192 q IMEM_INIT [191:0] $end
   $var wire 8 w DMEM_INIT [7:0] $end
   $var wire 1 b clk $end
   $var wire 1 c rst $end
   $var wire 1 d illegal_op $end
   $var wire 32 e debug_pc [31:0] $end
   $var wire 32 f debug_instr [31:0] $end
   $var wire 32 g debug_reg_wdata [31:0] $end
   $var wire 32 h debug_reg_rdata1 [31:0] $end
   $var wire 32 i debug_reg_rdata2 [31:0] $end
   $var wire 32 j debug_alu_result [31:0] $end
   $var wire 32 k debug_mem_rdata [31:0] $end
   $var wire 32 l debug_next_pc [31:0] $end
   $var wire 1 m debug_pc_src_sel $end
   $var wire 4 n debug_alu_ctrl [3:0] $end
   $var wire 1 o debug_reg_wen $end
   $var wire 32 l next_pc [31:0] $end
   $var wire 32 , pc [31:0] $end
   $var wire 32 - pc_plus_4 [31:0] $end
   $var wire 32 . instr [31:0] $end
   $var wire 32 / immediate [31:0] $end
   $var wire 32 $ reg_wdata [31:0] $end
   $var wire 32 h reg_rdata1 [31:0] $end
   $var wire 32 i reg_rdata2 [31:0] $end
   $var wire 1 0 reg_wen $end
   $var wire 1 1 alu_pc_sel $end
   $var wire 1 2 alu_imm_sel $end
   $var wire 4 3 alu_ctrl [3:0] $end
   $var wire 1 4 mem_wen $end
   $var wire 2 5 wb_sel [1:0] $end
   $var wire 1 % pc_src_sel $end
   $var wire 3 6 branch_cond [2:0] $end
   $var wire 32 & alu_src1 [31:0] $end
   $var wire 32 ' alu_src2 [31:0] $end
   $var wire 32 ( alu_result [31:0] $end
   $var wire 3 7 byte_mask [2:0] $end
   $var wire 32 k mem_rdata [31:0] $end
   $scope module pcSel $end
    $var wire 32 - A [31:0] $end
    $var wire 32 ( B [31:0] $end
    $var wire 1 % sel $end
    $var wire 32 l OUT [31:0] $end
   $upscope $end
   $scope module u_alu $end
    $var wire 32 & src1 [31:0] $end
    $var wire 32 ' src2 [31:0] $end
    $var wire 4 3 alu_ctrl [3:0] $end
    $var wire 32 ( result [31:0] $end
   $upscope $end
   $scope module u_aluImmSel $end
    $var wire 32 i A [31:0] $end
    $var wire 32 / B [31:0] $end
    $var wire 1 2 sel $end
    $var wire 32 ' OUT [31:0] $end
   $upscope $end
   $scope module u_aluPCSel $end
    $var wire 32 h A [31:0] $end
    $var wire 32 , B [31:0] $end
    $var wire 1 1 sel $end
    $var wire 32 & OUT [31:0] $end
   $upscope $end
   $scope module u_branchHandler $end
    $var wire 3 6 branch_cond [2:0] $end
    $var wire 32 h src1 [31:0] $end
    $var wire 32 i src2 [31:0] $end
    $var wire 1 % branched $end
    $var wire 1 ) equal $end
    $var wire 1 * slt $end
    $var wire 1 + sltu $end
   $upscope $end
   $scope module u_controller $end
    $var wire 7 8 opcode [6:0] $end
    $var wire 7 9 func7 [6:0] $end
    $var wire 3 : func3 [2:0] $end
    $var wire 4 3 alu_ctrl [3:0] $end
    $var wire 3 6 branch_cond [2:0] $end
    $var wire 3 7 byte_mask [2:0] $end
    $var wire 2 5 wb_sel [1:0] $end
    $var wire 1 0 reg_wen $end
    $var wire 1 1 alu_pc_sel $end
    $var wire 1 2 alu_imm_sel $end
    $var wire 1 4 mem_wen $end
    $var wire 1 d illegal_op $end
   $upscope $end
   $scope module u_dataMem $end
    $var wire 32 p WORDS [31:0] $end
    $var wire 8 w mem_init [7:0] $end
    $var wire 1 b clk $end
    $var wire 1 4 wen $end
    $var wire 32 ( address [31:0] $end
    $var wire 32 i wdata [31:0] $end
    $var wire 3 7 byte_mask [2:0] $end
    $var wire 32 k rdata [31:0] $end
    $var wire 32 ; rdata_reg [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 # i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u_immGen $end
    $var wire 32 . instr [31:0] $end
    $var wire 32 / immediate [31:0] $end
    $var wire 5 < opcode [4:0] $end
    $var wire 3 = func3 [2:0] $end
    $var wire 5 x I_type [4:0] $end
    $var wire 5 y B_type [4:0] $end
    $var wire 5 z JAL_instr [4:0] $end
    $var wire 5 { JALR_instr [4:0] $end
    $var wire 5 | L_type [4:0] $end
    $var wire 5 } S_type [4:0] $end
    $var wire 5 ~ LUI_instr [4:0] $end
    $var wire 5 !! AUIPC_instr [4:0] $end
   $upscope $end
   $scope module u_instrMem $end
    $var wire 32 p WORDS [31:0] $end
    $var wire 192 q mem_init [191:0] $end
    $var wire 1 b clk $end
    $var wire 32 , address [31:0] $end
    $var wire 32 . instr [31:0] $end
   $upscope $end
   $scope module u_pc $end
    $var wire 1 b clk $end
    $var wire 1 c rst $end
    $var wire 32 l next_pc [31:0] $end
    $var wire 32 , pc [31:0] $end
    $var wire 32 "! reset_val [31:0] $end
   $upscope $end
   $scope module u_pcIncr $end
    $var wire 32 , src1 [31:0] $end
    $var wire 32 #! src2 [31:0] $end
    $var wire 32 - result [31:0] $end
   $upscope $end
   $scope module u_regFile $end
    $var wire 1 b clk $end
    $var wire 1 c rst $end
    $var wire 1 0 wen $end
    $var wire 5 > rsrc1 [4:0] $end
    $var wire 5 ? rsrc2 [4:0] $end
    $var wire 5 @ wdest [4:0] $end
    $var wire 32 $ wdata [31:0] $end
    $var wire 32 h rdata1 [31:0] $end
    $var wire 32 i rdata2 [31:0] $end
    $var wire 32 A regs[0] [31:0] $end
    $var wire 32 B regs[1] [31:0] $end
    $var wire 32 C regs[2] [31:0] $end
    $var wire 32 D regs[3] [31:0] $end
    $var wire 32 E regs[4] [31:0] $end
    $var wire 32 F regs[5] [31:0] $end
    $var wire 32 G regs[6] [31:0] $end
    $var wire 32 H regs[7] [31:0] $end
    $var wire 32 I regs[8] [31:0] $end
    $var wire 32 J regs[9] [31:0] $end
    $var wire 32 K regs[10] [31:0] $end
    $var wire 32 L regs[11] [31:0] $end
    $var wire 32 M regs[12] [31:0] $end
    $var wire 32 N regs[13] [31:0] $end
    $var wire 32 O regs[14] [31:0] $end
    $var wire 32 P regs[15] [31:0] $end
    $var wire 32 Q regs[16] [31:0] $end
    $var wire 32 R regs[17] [31:0] $end
    $var wire 32 S regs[18] [31:0] $end
    $var wire 32 T regs[19] [31:0] $end
    $var wire 32 U regs[20] [31:0] $end
    $var wire 32 V regs[21] [31:0] $end
    $var wire 32 W regs[22] [31:0] $end
    $var wire 32 X regs[23] [31:0] $end
    $var wire 32 Y regs[24] [31:0] $end
    $var wire 32 Z regs[25] [31:0] $end
    $var wire 32 [ regs[26] [31:0] $end
    $var wire 32 \ regs[27] [31:0] $end
    $var wire 32 ] regs[28] [31:0] $end
    $var wire 32 ^ regs[29] [31:0] $end
    $var wire 32 _ regs[30] [31:0] $end
    $var wire 32 ` regs[31] [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 a i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module u_wbSel $end
    $var wire 32 ( A [31:0] $end
    $var wire 32 k B [31:0] $end
    $var wire 32 - C [31:0] $end
    $var wire 2 5 sel [1:0] $end
    $var wire 32 $ OUT [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000001000000000 #
b00000000000000000000000000000000 $
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
1)
0*
0+
b00000000000000000000000000000000 ,
b00000000000000000000000000000100 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
00
01
02
b0000 3
04
b00 5
b000 6
b010 7
b0000000 8
b0000000 9
b000 :
b00000000000000000000000000000000 ;
b00000 <
b000 =
b00000 >
b00000 ?
b00000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
0b
1c
1d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000100 l
0m
b0000 n
0o
b00000000000000000000000010000000 p
b001011100010111101110011011100100110001100101111010100100101011000110011001100100100100101011111010101000110010101110011011101000101000001110010011011110110011100101110011011010110010101101101 q
b00000000 w
b00100 x
b11000 y
b11011 z
b11001 {
b00000 |
b01000 }
b01101 ~
b00101 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000100 #!
#1
b00000000000000000000000000000101 $
b00000000000000000000000000000101 '
b00000000000000000000000000000101 (
b00000000000000000000000000000100 ,
b00000000000000000000000000001000 -
b00000000010100000000000010010011 .
b00000000000000000000000000000101 /
10
12
b0010011 8
b00100 <
b00101 ?
b00001 @
1b
0d
b00000000000000000000000000000100 e
b00000000010100000000000010010011 f
b00000000000000000000000000000101 g
b00000000000000000000000000000101 j
b00000000000000000000000000001000 l
1o
#2
0b
#3
b00000000000000000000000000000011 $
b00000000000000000000000000000011 '
b00000000000000000000000000000011 (
b00000000000000000000000000001000 ,
b00000000000000000000000000001100 -
b00000000001100000000000100010011 .
b00000000000000000000000000000011 /
b00011 ?
b00010 @
b00000000000000000000000000000101 B
1b
b00000000000000000000000000001000 e
b00000000001100000000000100010011 f
b00000000000000000000000000000011 g
b00000000000000000000000000000011 j
b00000000000000000000000000001100 l
#4
0b
0c
#5
b00000000000000000000000000000000 $
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 ,
b00000000000000000000000000000100 -
b00000000000000000001000110010011 .
b00000000000000000000000000000000 /
b0101 3
b001 :
b001 =
b00000 ?
b00011 @
b00000000000000000000000000000000 B
b00000000000000000000000000100000 a
1b
b00000000000000000000000000000000 e
b00000000000000000001000110010011 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 j
b00000000000000000000000000000100 l
b0101 n
#6
0b
#7
b00000000000000000000000000000101 $
b00000000000000000000000000000101 '
b00000000000000000000000000000101 (
b00000000010100000000000010010011 .
b00000000000000000000000000000101 /
b0000 3
b000 :
b000 =
b00101 ?
b00001 @
1b
b00000000010100000000000010010011 f
b00000000000000000000000000000101 g
b00000000000000000000000000000101 j
b0000 n
#8
0b
#9
1b
#10
0b
#11
1b
#12
0b
#13
1b
#14
0b
#15
1b
#16
0b
#17
1b
#18
0b
#19
1b
#20
0b
#21
1b
#22
0b
#23
1b
#24
0b
#25
1b
#26
0b
#27
1b
#28
0b
#29
1b
#30
0b
#31
1b
#32
0b
#33
1b
#34
0b
#35
1b
#36
0b
#37
1b
#38
0b
#39
1b
#40
0b
#41
1b
#42
0b
#43
1b
#44
0b
#45
1b
#46
0b
#47
1b
#48
0b
#49
1b
#50
0b
#51
1b
#52
0b
#53
1b
#54
0b
#55
1b
#56
0b
#57
1b
#58
0b
#59
1b
#60
0b
#61
1b
#62
0b
#63
1b
#64
0b
#65
1b
#66
0b
#67
1b
#68
0b
#69
1b
#70
0b
#71
1b
#72
0b
#73
1b
#74
0b
#75
1b
#76
0b
#77
1b
#78
0b
#79
1b
#80
0b
#81
1b
#82
0b
#83
1b
#84
0b
#85
1b
#86
0b
#87
1b
#88
0b
#89
1b
#90
0b
#91
1b
#92
0b
#93
1b
#94
0b
#95
1b
#96
0b
#97
1b
#98
0b
#99
1b
#100
0b
#101
1b
#102
0b
#103
1b
#104
0b
#105
1b
#106
0b
#107
1b
#108
0b
#109
1b
#110
0b
#111
1b
#112
0b
#113
1b
#114
0b
#115
1b
#116
0b
#117
1b
#118
0b
#119
1b
#120
0b
#121
1b
#122
0b
#123
1b
#124
0b
#125
1b
#126
0b
#127
1b
#128
0b
#129
1b
#130
0b
#131
1b
#132
0b
#133
1b
#134
0b
#135
1b
#136
0b
#137
1b
#138
0b
#139
1b
#140
0b
#141
1b
#142
0b
#143
1b
#144
0b
#145
1b
#146
0b
#147
1b
#148
0b
#149
1b
#150
0b
#151
1b
#152
0b
#153
1b
#154
0b
#155
1b
#156
0b
#157
1b
#158
0b
#159
1b
#160
0b
#161
1b
#162
0b
#163
1b
#164
0b
#165
1b
#166
0b
#167
1b
#168
0b
#169
1b
#170
0b
#171
1b
#172
0b
#173
1b
#174
0b
#175
1b
#176
0b
#177
1b
#178
0b
#179
1b
#180
0b
#181
1b
#182
0b
#183
1b
#184
0b
#185
1b
#186
0b
#187
1b
#188
0b
#189
1b
#190
0b
#191
1b
#192
0b
#193
1b
#194
0b
#195
1b
#196
0b
#197
1b
#198
0b
#199
1b
