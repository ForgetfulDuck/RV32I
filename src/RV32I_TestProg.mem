00 50 00 93 // addi x1, x0, 5
00 30 01 13 // addi x2, x0, 3
10 00 01 93 // addi x3, x0, 0x100

// ALU operations
00 20 82 33 // add x4, x1, x2
40 20 82 b3 // sub x5, x1, x2
00 20 f3 33 // and x6, x1, x2
00 20 e3 b3 // or x7, x1, x2
00 20 c4 33 // xor x8, x1, x2
00 20 94 b3 // sll x9, x1, x2
00 21 d5 33 // srl x10, x1, x2
40 20 d5 b3 // sra x11, x1, x2
00 20 a6 33 // slt x12, x1, x2
00 20 b6 b3 // sltu x13, x1, x2

// Immediate ALU operations
ff c0 07 13 // addi x14, x0, -4
00 60 a7 93 // slti x15, x1, 6
00 60 b8 13 // sltiu x16, x1, 6

// Load/store operations
00 11 a0 23 // sw x1, 0(x3)
00 01 a8 83 // lw x17, 0(x3)
00 11 92 23 // sh x1, 4(x3)
00 41 99 03 // lh x18, 4(x3)
00 11 84 23 // sb x1, 8(x3)
00 81 89 83 // lb x19, 8(x3)

// Branch and Jump operations
01 10 84 63    // beq  x1, x17, +8    -> TAKEN  -> jumps over next addi
00 40 00 6f    // addi x20, x0, 1     -> SKIPPED
00 a0 0a 93    // addi x21, x0, 10    -> EXECUTED (branch target)

00 80 0a ef    // jal  x21, +8        -> TAKEN (sets x21 to return addr)
00 10 0b 13    // addi x22, x0, 1     -> SKIPPED
04 d0 0b 93    // addi x23, x0, 77    -> EXECUTED (jump target)

// Final Register Print
00208033 // add x0, x1, x2
00418033 // add x0, x3, x4
00628033 // add x0, x5, x6
00838033 // add x0, x7, x8
00a48033 // add x0, x9, x10
00c58033 // add x0, x11, x12
00e68033 // add x0, x13, x14
01078033 // add x0, x15, x16
01288033 // add x0, x17, x18
01498033 // add x0, x19, x20
016a8033 // add x0, x21, x22
018b8033 // add x0, x23, x24
01ac8033 // add x0, x25, x26
01cd8033 // add x0, x27, x28
01ee8033 // add x0, x29, x30
000f8033 // add x0, x31, x0     (LINE 59)